"use strict";(self.webpackChunkopenim_docs=self.webpackChunkopenim_docs||[]).push([[43355],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),f=o,d=u["".concat(c,".").concat(f)]||u[f]||b[f]||a;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},34642:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>u});r(67294);var n=r(3905);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const s={sidebar_position:1,title:"Callback Description",hide_title:!0},c="\ud83d\udcde Callback Description",l={unversionedId:"webhooks/introduction",id:"webhooks/introduction",title:"Callback Description",description:"\ud83d\udce2 OpenIM offers a robust callback functionality. When a specific event occurs, either before or after it happens, OpenIM Server proactively notifies the APP's business server via HTTP/HTTPS requests. This way, the APP's business server can intervene in the subsequent process of the event or synchronize data based on these callbacks.",source:"@site/i18n/en/docusaurus-plugin-content-docs-restapi/current/webhooks/introduction.mdx",sourceDirName:"webhooks",slug:"/webhooks/introduction",permalink:"/restapi/webhooks/introduction",draft:!1,editUrl:"https://github.com/OpenIMSDK/docs/tree/main/docs/restapi/webhooks/introduction.mdx",tags:[],version:"current",lastUpdatedAt:1727160122,formattedLastUpdatedAt:"Sep 24, 2024",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Callback Description",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"batch_send_msg",permalink:"/restapi/apis/messageManagement/batchSendMessage"},next:{title:"Callback Example",permalink:"/restapi/webhooks/example"}},p={},u=[{value:"\ud83d\udcd1 Callback Categories",id:"-callback-categories",level:2},{value:"\u2699\ufe0f Configuration Description",id:"\ufe0f-configuration-description",level:2},{value:"\ud83d\udd04 Callback Protocol",id:"-callback-protocol",level:2}],b={toc:u},f="wrapper";function d(e){var{components:t}=e,r=i(e,["components"]);return(0,n.kt)(f,a(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){o(e,t,r[t])}))}return e}({},b,r),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"-callback-description"},"\ud83d\udcde Callback Description"),(0,n.kt)("p",null,"\ud83d\udce2 ",(0,n.kt)("strong",{parentName:"p"},"OpenIM")," offers a robust callback functionality. When a specific event occurs, either before or after it happens, ",(0,n.kt)("strong",{parentName:"p"},"OpenIM Server")," proactively notifies the APP's business server via HTTP/HTTPS requests. This way, the APP's business server can intervene in the subsequent process of the event or synchronize data based on these callbacks."),(0,n.kt)("h2",{id:"-callback-categories"},"\ud83d\udcd1 Callback Categories"),(0,n.kt)("p",null,"Based on the timing of processing, callbacks are divided into two main categories:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"\ud83d\udeab ",(0,n.kt)("strong",{parentName:"p"},"Callbacks before the event is sent"),": This type of callback (before type) aims to let the APP's business server intervene in event processing, such as filtering sensitive words in a message. ",(0,n.kt)("strong",{parentName:"p"},"OpenIM Server")," will determine the subsequent process based on the callback's return.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"\ud83d\udce4 ",(0,n.kt)("strong",{parentName:"p"},"Notifications after the event is sent"),": This type of callback (after type) is primarily used to notify the APP's business server to synchronize data, for example, when a user joins a group. At this point, ",(0,n.kt)("strong",{parentName:"p"},"OpenIM Server")," will ignore the callback's return and error codes."))),(0,n.kt)("h2",{id:"\ufe0f-configuration-description"},"\u2699\ufe0f Configuration Description"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"callback:\n  url:\n  beforeCreateGroup:\n    enable: false\n    timeout: 5\n    failedContinue: true\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"url: Callback address of the APP's business server, supporting HTTP/HTTPS"),(0,n.kt)("li",{parentName:"ul"},"enable: Whether to enable this callback"),(0,n.kt)("li",{parentName:"ul"},"timeout: Response timeout duration (in seconds)"),(0,n.kt)("li",{parentName:"ul"},'failedContinue: Whether to continue the process after timeout or API failure, generally effective only for the "before" type of callback.')),(0,n.kt)("h2",{id:"-callback-protocol"},"\ud83d\udd04 Callback Protocol"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"OpenIM Server")," utilizes third-party callback mechanisms based on the ",(0,n.kt)("strong",{parentName:"p"},"HTTP/HTTPS")," protocol. When initiating a callback request, ",(0,n.kt)("strong",{parentName:"p"},"OpenIM Server")," uses the ",(0,n.kt)("strong",{parentName:"p"},"POST")," request method to notify the APP's business server. The specific content of these requests will be directly included in the request body."))}d.isMDXComponent=!0}}]);